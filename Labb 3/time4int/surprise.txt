/* mipslabwork.c

   This file written 2015 by F Lundevall
   Updated 2017-04-21 by F Lundevall

   This file should be changed by YOU! So you must
   add comment(s) here with your name(s) and date(s):

   This file modified 2020-02-18 by Adeel Hussain

   For copyright and licensing, see file COPYING */



#include <stdint.h>   /* Declarations of uint_32 and the like */
#include <pic32mx.h>  /* Declarations of system-specific addresses etc */
#include "mipslab.h"  /* Declatations for these labs */

#define TMR2PERIOD ((80000000/256/10)) //100ms

int mytime = 0x0000;
int timeoutcount = 0;
int prime = 1234567;

volatile int *porte = (volatile int *) 0xbf886110;

char textstring[] = "text, more text, and even more text!";

/* Interrupt Service Routine */
void user_isr( void ) 
{

  if (IFS(0) & 0x100)  //checks the flag at bit 8
  {
    timeoutcount++; //increments timeoutcount
    IFS(0) = 0; //Clears Flags

    if(timeoutcount == 10)
    {
        time2string( textstring, mytime );
        display_string( 3, textstring );
        display_update();
        tick( &mytime );
        timeoutcount = 0;
    }
  }

    if (IFS(0) & (1<<15))
    {
        IFS(0) = 0;
        (*porte)++;
    }

}
/* Lab-specific initialization goes here */
void labinit( void )
{
  
	// Set *E to address of TRISE.
	volatile int *E = (volatile int *) 0xbf886100;
	
	// Set first 8 bits to zero, i.e. sets them as output pins.
	*E = *E & 0xff00;

	// Initialize port D, set bits 11-5 as inputs.
	TRISD = TRISD & 0x0fe0;

	T2CONSET = 0x70; // 0111 0000 (bit 6-4 for prescaling, Section 14 Timers, P.9)
	PR2 = TMR2PERIOD; //Set the time period
	TMR2 = 0; //Resets the timer
	T2CONSET = 0x8000; //Sets the bit 15 "ON" to 1 in TCON
  return;

  //Enable itterupts from Timer 2
    IEC(0) = (1<<8); //Sets the first bit to 1 and shifts it left 8 bits
    IPC(2) = 4; //Enables the interrupts from TMR2 on highest priority

    IPC(3) = 0x1c000000; // bit 28 - 26
    IEC(0) = IEC(0) | (1<<15); // Sets bit 15 to 1, masks the others
    //Enable interrupts globally
    enable_interrupt();


}

/* This function is called repetitively from the main program */
void labwork( void ) 
{
 prime = nextprime( prime );
 display_string( 0, itoaconv( prime ) );
 display_update();
}

